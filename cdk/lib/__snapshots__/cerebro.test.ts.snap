// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`The Cerebro stack matches the snapshot 1`] = `
{
  "Metadata": {
    "gu:cdk:constructs": [
      "GuVpcParameter",
      "GuStringParameter",
      "GuSubnetListParameter",
      "GuSubnetListParameter",
      "GuEc2App",
      "GuCertificate",
      "GuInstanceRole",
      "GuDescribeEC2Policy",
      "GuLoggingStreamNameParameter",
      "GuLogShippingPolicy",
      "GuDistributionBucketParameter",
      "GuGetDistributablePolicy",
      "GuParameterStoreReadPolicy",
      "GuAmiParameter",
      "GuHttpsEgressSecurityGroup",
      "GuWazuhAccess",
      "GuAutoScalingGroup",
      "GuApplicationLoadBalancer",
      "GuApplicationTargetGroup",
      "GuHttpsApplicationListener",
      "GuLambdaFunction",
      "GuHttpsEgressSecurityGroup",
      "GuSecurityGroup",
      "GuCname",
    ],
    "gu:cdk:version": "TEST",
  },
  "Outputs": {
    "LoadBalancerCerebroDnsName": {
      "Description": "DNS entry for LoadBalancerCerebro",
      "Value": {
        "Fn::GetAtt": [
          "LoadBalancerCerebroA5D940A1",
          "DNSName",
        ],
      },
    },
  },
  "Parameters": {
    "AMICerebro": {
      "Description": "Amazon Machine Image ID for the app cerebro. Use this in conjunction with AMIgo to keep AMIs up to date.",
      "Type": "AWS::EC2::Image::Id",
    },
    "DistributionBucketName": {
      "Default": "/account/services/artifact.bucket",
      "Description": "SSM parameter containing the S3 bucket name holding distribution artifacts",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "LoggingStreamName": {
      "Default": "/account/services/logging.stream.name",
      "Description": "SSM parameter containing the Name (not ARN) on the kinesis stream",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "VpcId": {
      "Default": "/account/vpc/primary/id",
      "Description": "Virtual Private Cloud to run EC2 instances within. Should NOT be the account default VPC.",
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::VPC::Id>",
    },
    "bucketoverrideParameter": {
      "Default": "/organisation/services/artifact.bucket",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "cerebroPrivateSubnets": {
      "Default": "/account/vpc/primary/subnets/private",
      "Description": "A list of private subnets",
      "Type": "AWS::SSM::Parameter::Value<List<AWS::EC2::Subnet::Id>>",
    },
    "cerebroPublicSubnets": {
      "Default": "/account/vpc/primary/subnets/public",
      "Description": "A list of public subnets",
      "Type": "AWS::SSM::Parameter::Value<List<AWS::EC2::Subnet::Id>>",
    },
    "deploytoolsaccountidparameterParameter": {
      "Default": "/organisation/accounts/deployTools",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "elasticsearchUrl": {
      "Default": "/TEST/grid-elasticsearch/elasticsearch/url",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "AutoScalingGroupCerebroASGFB7E270B": {
      "Properties": {
        "HealthCheckGracePeriod": 120,
        "HealthCheckType": "ELB",
        "LaunchTemplate": {
          "LaunchTemplateId": {
            "Ref": "mediaserviceTESTcerebro6E75DA77",
          },
          "Version": {
            "Fn::GetAtt": [
              "mediaserviceTESTcerebro6E75DA77",
              "LatestVersionNumber",
            ],
          },
        },
        "MaxSize": "2",
        "MinSize": "1",
        "Tags": [
          {
            "Key": "App",
            "PropagateAtLaunch": true,
            "Value": "cerebro",
          },
          {
            "Key": "gu:cdk:version",
            "PropagateAtLaunch": true,
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "PropagateAtLaunch": true,
            "Value": "guardian/grid-cerebro",
          },
          {
            "Key": "LogKinesisStreamName",
            "PropagateAtLaunch": true,
            "Value": {
              "Ref": "LoggingStreamName",
            },
          },
          {
            "Key": "Stack",
            "PropagateAtLaunch": true,
            "Value": "media-service",
          },
          {
            "Key": "Stage",
            "PropagateAtLaunch": true,
            "Value": "TEST",
          },
        ],
        "TargetGroupARNs": [
          {
            "Ref": "TargetGroupCerebro8F48E4B4",
          },
        ],
        "VPCZoneIdentifier": {
          "Ref": "cerebroPrivateSubnets",
        },
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup",
    },
    "CerebroCname": {
      "Properties": {
        "Name": "grid-cerebro-test.test.dev-gutools.co.uk",
        "RecordType": "CNAME",
        "ResourceRecords": [
          {
            "Fn::GetAtt": [
              "LoadBalancerCerebroA5D940A1",
              "DNSName",
            ],
          },
        ],
        "Stage": "TEST",
        "TTL": 3600,
      },
      "Type": "Guardian::DNS::RecordSet",
    },
    "CertificateCerebro150068B5": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "DomainName": "grid-cerebro-test.test.dev-gutools.co.uk",
        "Tags": [
          {
            "Key": "App",
            "Value": "cerebro",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/grid-cerebro",
          },
          {
            "Key": "Name",
            "Value": "cerebro-TEST/CertificateCerebro",
          },
          {
            "Key": "Stack",
            "Value": "media-service",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "ValidationMethod": "DNS",
      },
      "Type": "AWS::CertificateManager::Certificate",
      "UpdateReplacePolicy": "Retain",
    },
    "DescribeEC2PolicyFF5F9295": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "autoscaling:DescribeAutoScalingInstances",
                "autoscaling:DescribeAutoScalingGroups",
                "ec2:DescribeTags",
                "ec2:DescribeInstances",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "describe-ec2-policy",
        "Roles": [
          {
            "Ref": "InstanceRoleCerebroE772BF3D",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ElasticSearchAccessCerebro8976FF11": {
      "Properties": {
        "GroupDescription": "cerebro-TEST/ElasticSearchAccessCerebro",
        "SecurityGroupEgress": [
          {
            "CidrIp": "172.16.0.0/12",
            "Description": "Allow outgoing Elasticsearch connections",
            "FromPort": 9200,
            "IpProtocol": "tcp",
            "ToPort": 9200,
          },
        ],
        "Tags": [
          {
            "Key": "App",
            "Value": "cerebro",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/grid-cerebro",
          },
          {
            "Key": "Stack",
            "Value": "media-service",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "VpcId": {
          "Ref": "VpcId",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ElasticSearchAccessCerebrofromcerebroTESTLoadBalancerCerebroSecurityGroup52BDFD869000C4A5FB20": {
      "Properties": {
        "Description": "Load balancer to target",
        "FromPort": 9000,
        "GroupId": {
          "Fn::GetAtt": [
            "ElasticSearchAccessCerebro8976FF11",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "LoadBalancerCerebroSecurityGroupB74E04CC",
            "GroupId",
          ],
        },
        "ToPort": 9000,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "ElasticSearchAccessCerebrofromcerebroTESTldpaccessCerebro0C8021BB90005074578A": {
      "Properties": {
        "Description": "Load balancer to target",
        "FromPort": 9000,
        "GroupId": {
          "Fn::GetAtt": [
            "ElasticSearchAccessCerebro8976FF11",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "ldpaccessCerebro20E55119",
            "GroupId",
          ],
        },
        "ToPort": 9000,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "GetDistributablePolicyCerebroDC456496": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:GetObject",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "DistributionBucketName",
                    },
                    "/media-service/TEST/cerebro/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "GetDistributablePolicyCerebroDC456496",
        "Roles": [
          {
            "Ref": "InstanceRoleCerebroE772BF3D",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "GuHttpsEgressSecurityGroupCerebro4DCECD72": {
      "Properties": {
        "GroupDescription": "Allow all outbound HTTPS traffic",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound HTTPS traffic",
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "Tags": [
          {
            "Key": "App",
            "Value": "cerebro",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/grid-cerebro",
          },
          {
            "Key": "Stack",
            "Value": "media-service",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "VpcId": {
          "Ref": "VpcId",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "GuHttpsEgressSecurityGroupCerebrofromcerebroTESTLoadBalancerCerebroSecurityGroup52BDFD869000771D3C6B": {
      "Properties": {
        "Description": "Load balancer to target",
        "FromPort": 9000,
        "GroupId": {
          "Fn::GetAtt": [
            "GuHttpsEgressSecurityGroupCerebro4DCECD72",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "LoadBalancerCerebroSecurityGroupB74E04CC",
            "GroupId",
          ],
        },
        "ToPort": 9000,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "GuHttpsEgressSecurityGroupCerebrofromcerebroTESTldpaccessCerebro0C8021BB90000B0CAE0D": {
      "Properties": {
        "Description": "Load balancer to target",
        "FromPort": 9000,
        "GroupId": {
          "Fn::GetAtt": [
            "GuHttpsEgressSecurityGroupCerebro4DCECD72",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "ldpaccessCerebro20E55119",
            "GroupId",
          ],
        },
        "ToPort": 9000,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "GuLogShippingPolicy981BFE5A": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:kinesis:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "GuLogShippingPolicy981BFE5A",
        "Roles": [
          {
            "Ref": "InstanceRoleCerebroE772BF3D",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "InstanceRoleCerebroE772BF3D": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonSSMManagedInstanceCore",
              ],
            ],
          },
        ],
        "Path": "/",
        "Tags": [
          {
            "Key": "App",
            "Value": "cerebro",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/grid-cerebro",
          },
          {
            "Key": "Stack",
            "Value": "media-service",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ListenerCerebro29D660A3": {
      "Properties": {
        "Certificates": [
          {
            "CertificateArn": {
              "Ref": "CertificateCerebro150068B5",
            },
          },
        ],
        "DefaultActions": [
          {
            "AuthenticateCognitoConfig": {
              "SessionTimeout": "900",
              "UserPoolArn": {
                "Fn::GetAtt": [
                  "cerebrouserpool7F1280D6",
                  "Arn",
                ],
              },
              "UserPoolClientId": {
                "Ref": "cerebrouserpoolalbclient7C88F015",
              },
              "UserPoolDomain": {
                "Ref": "cerebrouserpooldomain00656218",
              },
            },
            "Order": 1,
            "Type": "authenticate-cognito",
          },
          {
            "Order": 2,
            "TargetGroupArn": {
              "Ref": "TargetGroupCerebro8F48E4B4",
            },
            "Type": "forward",
          },
        ],
        "LoadBalancerArn": {
          "Ref": "LoadBalancerCerebroA5D940A1",
        },
        "Port": 443,
        "Protocol": "HTTPS",
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
    },
    "LoadBalancerCerebroA5D940A1": {
      "Properties": {
        "LoadBalancerAttributes": [
          {
            "Key": "deletion_protection.enabled",
            "Value": "true",
          },
        ],
        "Scheme": "internet-facing",
        "SecurityGroups": [
          {
            "Fn::GetAtt": [
              "LoadBalancerCerebroSecurityGroupB74E04CC",
              "GroupId",
            ],
          },
          {
            "Fn::GetAtt": [
              "ldpaccessCerebro20E55119",
              "GroupId",
            ],
          },
        ],
        "Subnets": {
          "Ref": "cerebroPublicSubnets",
        },
        "Tags": [
          {
            "Key": "App",
            "Value": "cerebro",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/grid-cerebro",
          },
          {
            "Key": "Stack",
            "Value": "media-service",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "Type": "application",
      },
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
    },
    "LoadBalancerCerebroSecurityGroupB74E04CC": {
      "Properties": {
        "GroupDescription": "Automatically created Security Group for ELB cerebroTESTLoadBalancerCerebro9233C8B5",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow to IdP endpoint",
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow from anyone on port 443",
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "Tags": [
          {
            "Key": "App",
            "Value": "cerebro",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/grid-cerebro",
          },
          {
            "Key": "Stack",
            "Value": "media-service",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "VpcId": {
          "Ref": "VpcId",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "LoadBalancerCerebroSecurityGrouptocerebroTESTElasticSearchAccessCerebro68F4EBE39000A9D7B711": {
      "Properties": {
        "Description": "Load balancer to target",
        "DestinationSecurityGroupId": {
          "Fn::GetAtt": [
            "ElasticSearchAccessCerebro8976FF11",
            "GroupId",
          ],
        },
        "FromPort": 9000,
        "GroupId": {
          "Fn::GetAtt": [
            "LoadBalancerCerebroSecurityGroupB74E04CC",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "ToPort": 9000,
      },
      "Type": "AWS::EC2::SecurityGroupEgress",
    },
    "LoadBalancerCerebroSecurityGrouptocerebroTESTGuHttpsEgressSecurityGroupCerebroF93BDB94900077011768": {
      "Properties": {
        "Description": "Load balancer to target",
        "DestinationSecurityGroupId": {
          "Fn::GetAtt": [
            "GuHttpsEgressSecurityGroupCerebro4DCECD72",
            "GroupId",
          ],
        },
        "FromPort": 9000,
        "GroupId": {
          "Fn::GetAtt": [
            "LoadBalancerCerebroSecurityGroupB74E04CC",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "ToPort": 9000,
      },
      "Type": "AWS::EC2::SecurityGroupEgress",
    },
    "LoadBalancerCerebroSecurityGrouptocerebroTESTWazuhSecurityGroup20EA810B9000CB2D8872": {
      "Properties": {
        "Description": "Load balancer to target",
        "DestinationSecurityGroupId": {
          "Fn::GetAtt": [
            "WazuhSecurityGroup",
            "GroupId",
          ],
        },
        "FromPort": 9000,
        "GroupId": {
          "Fn::GetAtt": [
            "LoadBalancerCerebroSecurityGroupB74E04CC",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "ToPort": 9000,
      },
      "Type": "AWS::EC2::SecurityGroupEgress",
    },
    "ParameterStoreReadCerebro1B619DE0": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ssm:GetParametersByPath",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/TEST/media-service/cerebro",
                  ],
                ],
              },
            },
            {
              "Action": [
                "ssm:GetParameters",
                "ssm:GetParameter",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/TEST/media-service/cerebro/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "parameter-store-read-policy",
        "Roles": [
          {
            "Ref": "InstanceRoleCerebroE772BF3D",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "TargetGroupCerebro8F48E4B4": {
      "Properties": {
        "HealthCheckIntervalSeconds": 10,
        "HealthCheckPath": "/",
        "HealthCheckProtocol": "HTTP",
        "HealthCheckTimeoutSeconds": 5,
        "HealthyThresholdCount": 5,
        "Port": 9000,
        "Protocol": "HTTP",
        "Tags": [
          {
            "Key": "App",
            "Value": "cerebro",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/grid-cerebro",
          },
          {
            "Key": "Stack",
            "Value": "media-service",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "TargetGroupAttributes": [
          {
            "Key": "deregistration_delay.timeout_seconds",
            "Value": "30",
          },
          {
            "Key": "stickiness.enabled",
            "Value": "false",
          },
        ],
        "TargetType": "instance",
        "UnhealthyThresholdCount": 2,
        "VpcId": {
          "Ref": "VpcId",
        },
      },
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
    },
    "WazuhSecurityGroup": {
      "Properties": {
        "GroupDescription": "Allow outbound traffic from wazuh agent to manager",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Wazuh event logging",
            "FromPort": 1514,
            "IpProtocol": "tcp",
            "ToPort": 1514,
          },
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Wazuh agent registration",
            "FromPort": 1515,
            "IpProtocol": "tcp",
            "ToPort": 1515,
          },
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/grid-cerebro",
          },
          {
            "Key": "Stack",
            "Value": "media-service",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "VpcId": {
          "Ref": "VpcId",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "WazuhSecurityGroupfromcerebroTESTLoadBalancerCerebroSecurityGroup52BDFD869000608399AE": {
      "Properties": {
        "Description": "Load balancer to target",
        "FromPort": 9000,
        "GroupId": {
          "Fn::GetAtt": [
            "WazuhSecurityGroup",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "LoadBalancerCerebroSecurityGroupB74E04CC",
            "GroupId",
          ],
        },
        "ToPort": 9000,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "WazuhSecurityGroupfromcerebroTESTldpaccessCerebro0C8021BB9000D9E94C8F": {
      "Properties": {
        "Description": "Load balancer to target",
        "FromPort": 9000,
        "GroupId": {
          "Fn::GetAtt": [
            "WazuhSecurityGroup",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "ldpaccessCerebro20E55119",
            "GroupId",
          ],
        },
        "ToPort": 9000,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "authlambda5AE8A89F": {
      "DependsOn": [
        "authlambdaServiceRoleDefaultPolicy4F870132",
        "authlambdaServiceRole39F49DB1",
      ],
      "Properties": {
        "Architectures": [
          "x86_64",
        ],
        "Code": {
          "S3Bucket": {
            "Ref": "bucketoverrideParameter",
          },
          "S3Key": "deploy/INFRA/cognito-lambda/devx-cognito-lambda-amd64-v1.zip",
        },
        "Environment": {
          "Variables": {
            "ALLOWED_GROUPS": "engineering@guardian.co.uk",
            "APP": "cerebro",
            "GATEKEEPER_FUNCTION_ARN": {
              "Fn::Join": [
                "",
                [
                  "arn:aws:lambda:eu-west-1:",
                  {
                    "Ref": "deploytoolsaccountidparameterParameter",
                  },
                  ":function:deploy-PROD-gatekeeper-lambda",
                ],
              ],
            },
            "STACK": "media-service",
            "STAGE": "TEST",
          },
        },
        "Handler": "devx-cognito-lambda-amd64-v1",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "authlambdaServiceRole39F49DB1",
            "Arn",
          ],
        },
        "Runtime": "go1.x",
        "Tags": [
          {
            "Key": "App",
            "Value": "cerebro",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/grid-cerebro",
          },
          {
            "Key": "Stack",
            "Value": "media-service",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "authlambdaServiceRole39F49DB1": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
        "Tags": [
          {
            "Key": "App",
            "Value": "cerebro",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/grid-cerebro",
          },
          {
            "Key": "Stack",
            "Value": "media-service",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "authlambdaServiceRoleDefaultPolicy4F870132": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Ref": "bucketoverrideParameter",
                      },
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Ref": "bucketoverrideParameter",
                      },
                      "/deploy/INFRA/cognito-lambda/devx-cognito-lambda-amd64-v1.zip",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "ssm:GetParametersByPath",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/TEST/media-service/cerebro",
                  ],
                ],
              },
            },
            {
              "Action": [
                "ssm:GetParameters",
                "ssm:GetParameter",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/TEST/media-service/cerebro/*",
                  ],
                ],
              },
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:lambda:eu-west-1:",
                    {
                      "Ref": "deploytoolsaccountidparameterParameter",
                    },
                    ":function:deploy-PROD-gatekeeper-lambda",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "authlambdaServiceRoleDefaultPolicy4F870132",
        "Roles": [
          {
            "Ref": "authlambdaServiceRole39F49DB1",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "cerebrouserpool7F1280D6": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "AccountRecoverySetting": {
          "RecoveryMechanisms": [
            {
              "Name": "verified_phone_number",
              "Priority": 1,
            },
            {
              "Name": "verified_email",
              "Priority": 2,
            },
          ],
        },
        "AdminCreateUserConfig": {
          "AllowAdminCreateUserOnly": true,
        },
        "EmailVerificationMessage": "The verification code to your new account is {####}",
        "EmailVerificationSubject": "Verify your new account",
        "LambdaConfig": {
          "PreAuthentication": {
            "Fn::GetAtt": [
              "authlambda5AE8A89F",
              "Arn",
            ],
          },
          "PreSignUp": {
            "Fn::GetAtt": [
              "authlambda5AE8A89F",
              "Arn",
            ],
          },
        },
        "SmsVerificationMessage": "The verification code to your new account is {####}",
        "UserPoolTags": {
          "Stack": "media-service",
          "Stage": "TEST",
          "gu:cdk:version": "TEST",
          "gu:repo": "guardian/grid-cerebro",
        },
        "VerificationMessageTemplate": {
          "DefaultEmailOption": "CONFIRM_WITH_CODE",
          "EmailMessage": "The verification code to your new account is {####}",
          "EmailSubject": "Verify your new account",
          "SmsMessage": "The verification code to your new account is {####}",
        },
      },
      "Type": "AWS::Cognito::UserPool",
      "UpdateReplacePolicy": "Retain",
    },
    "cerebrouserpoolPreAuthenticationCognito4088A978": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "authlambda5AE8A89F",
            "Arn",
          ],
        },
        "Principal": "cognito-idp.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "cerebrouserpool7F1280D6",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "cerebrouserpoolPreSignUpCognitoB20CD63E": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "authlambda5AE8A89F",
            "Arn",
          ],
        },
        "Principal": "cognito-idp.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "cerebrouserpool7F1280D6",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "cerebrouserpoolalbclient7C88F015": {
      "DependsOn": [
        "googleidp5A744057",
      ],
      "Properties": {
        "AccessTokenValidity": 60,
        "AllowedOAuthFlows": [
          "implicit",
          "code",
        ],
        "AllowedOAuthFlowsUserPoolClient": true,
        "AllowedOAuthScopes": [
          "profile",
          "phone",
          "email",
          "openid",
          "aws.cognito.signin.user.admin",
        ],
        "CallbackURLs": [
          "https://grid-cerebro-test.test.dev-gutools.co.uk/oauth2/idpresponse",
        ],
        "GenerateSecret": true,
        "IdTokenValidity": 60,
        "RefreshTokenValidity": 10080,
        "SupportedIdentityProviders": [
          "Google",
        ],
        "TokenValidityUnits": {
          "AccessToken": "minutes",
          "IdToken": "minutes",
          "RefreshToken": "minutes",
        },
        "UserPoolId": {
          "Ref": "cerebrouserpool7F1280D6",
        },
      },
      "Type": "AWS::Cognito::UserPoolClient",
    },
    "cerebrouserpooldomain00656218": {
      "Properties": {
        "Domain": "com-gu-cerebro-test-a85555b3314d5e6abe140ea58c575d5e",
        "UserPoolId": {
          "Ref": "cerebrouserpool7F1280D6",
        },
      },
      "Type": "AWS::Cognito::UserPoolDomain",
    },
    "googleidp5A744057": {
      "Properties": {
        "AttributeMapping": {
          "email": "email",
          "family_name": "family_name",
          "given_name": "given_name",
          "name": "name",
          "picture": "picture",
        },
        "ProviderDetails": {
          "authorize_scopes": "openid email profile",
          "client_id": "{{resolve:secretsmanager:/TEST/media-service/cerebro/google-auth-credentials:SecretString:clientId::}}",
          "client_secret": "{{resolve:secretsmanager:/TEST/media-service/cerebro/google-auth-credentials:SecretString:clientSecret::}}",
        },
        "ProviderName": "Google",
        "ProviderType": "Google",
        "UserPoolId": {
          "Ref": "cerebrouserpool7F1280D6",
        },
      },
      "Type": "AWS::Cognito::UserPoolIdentityProvider",
    },
    "ldpaccessCerebro20E55119": {
      "Properties": {
        "GroupDescription": "Allow all outbound HTTPS traffic",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound HTTPS traffic",
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "Tags": [
          {
            "Key": "App",
            "Value": "cerebro",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/grid-cerebro",
          },
          {
            "Key": "Stack",
            "Value": "media-service",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "VpcId": {
          "Ref": "VpcId",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ldpaccessCerebrotocerebroTESTElasticSearchAccessCerebro68F4EBE3900031E52236": {
      "Properties": {
        "Description": "Load balancer to target",
        "DestinationSecurityGroupId": {
          "Fn::GetAtt": [
            "ElasticSearchAccessCerebro8976FF11",
            "GroupId",
          ],
        },
        "FromPort": 9000,
        "GroupId": {
          "Fn::GetAtt": [
            "ldpaccessCerebro20E55119",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "ToPort": 9000,
      },
      "Type": "AWS::EC2::SecurityGroupEgress",
    },
    "ldpaccessCerebrotocerebroTESTGuHttpsEgressSecurityGroupCerebroF93BDB949000A1138372": {
      "Properties": {
        "Description": "Load balancer to target",
        "DestinationSecurityGroupId": {
          "Fn::GetAtt": [
            "GuHttpsEgressSecurityGroupCerebro4DCECD72",
            "GroupId",
          ],
        },
        "FromPort": 9000,
        "GroupId": {
          "Fn::GetAtt": [
            "ldpaccessCerebro20E55119",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "ToPort": 9000,
      },
      "Type": "AWS::EC2::SecurityGroupEgress",
    },
    "ldpaccessCerebrotocerebroTESTWazuhSecurityGroup20EA810B90002AA45B37": {
      "Properties": {
        "Description": "Load balancer to target",
        "DestinationSecurityGroupId": {
          "Fn::GetAtt": [
            "WazuhSecurityGroup",
            "GroupId",
          ],
        },
        "FromPort": 9000,
        "GroupId": {
          "Fn::GetAtt": [
            "ldpaccessCerebro20E55119",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "ToPort": 9000,
      },
      "Type": "AWS::EC2::SecurityGroupEgress",
    },
    "mediaserviceTESTcerebro6E75DA77": {
      "Properties": {
        "LaunchTemplateData": {
          "IamInstanceProfile": {
            "Arn": {
              "Fn::GetAtt": [
                "mediaserviceTESTcerebroProfile9BF83A02",
                "Arn",
              ],
            },
          },
          "ImageId": {
            "Ref": "AMICerebro",
          },
          "InstanceType": "t4g.small",
          "MetadataOptions": {
            "HttpTokens": "required",
          },
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "GuHttpsEgressSecurityGroupCerebro4DCECD72",
                "GroupId",
              ],
            },
            {
              "Fn::GetAtt": [
                "WazuhSecurityGroup",
                "GroupId",
              ],
            },
            {
              "Fn::GetAtt": [
                "ElasticSearchAccessCerebro8976FF11",
                "GroupId",
              ],
            },
          ],
          "TagSpecifications": [
            {
              "ResourceType": "instance",
              "Tags": [
                {
                  "Key": "gu:cdk:version",
                  "Value": "TEST",
                },
                {
                  "Key": "gu:repo",
                  "Value": "guardian/grid-cerebro",
                },
                {
                  "Key": "Name",
                  "Value": "cerebro-TEST/media-service-TEST-cerebro",
                },
                {
                  "Key": "Stack",
                  "Value": "media-service",
                },
                {
                  "Key": "Stage",
                  "Value": "TEST",
                },
              ],
            },
            {
              "ResourceType": "volume",
              "Tags": [
                {
                  "Key": "gu:cdk:version",
                  "Value": "TEST",
                },
                {
                  "Key": "gu:repo",
                  "Value": "guardian/grid-cerebro",
                },
                {
                  "Key": "Name",
                  "Value": "cerebro-TEST/media-service-TEST-cerebro",
                },
                {
                  "Key": "Stack",
                  "Value": "media-service",
                },
                {
                  "Key": "Stage",
                  "Value": "TEST",
                },
              ],
            },
          ],
          "UserData": {
            "Fn::Base64": {
              "Fn::Join": [
                "",
                [
                  "#!/bin/bash -ev
adduser --disabled-password cerebro
export HOME=/home/cerebro
cd $HOME
wget https://github.com/lmenezes/cerebro/releases/download/vv0.0.0/cerebro_v0.0.0_all.deb
dpkg -i cerebro_v0.0.0_all.deb
echo 'JAVA_OPTS="-Dconfig.file=/etc/cerebro/custom.conf -Dpidfile.path=/dev/null"' > /etc/default/cerebro
cat <<'EOF' > /etc/cerebro/custom.conf
# Include these as defaults
include "/etc/cerebro/application.conf"
      
# Overrides
data.path: "/var/lib/cerebro/cerebro.db"
      
hosts = [
  {
    host = "",
                  {
                    "Ref": "elasticsearchUrl",
                  },
                  ""
    name = "media-service (TEST)"
  }
]
EOF
systemctl restart cerebro
",
                ],
              ],
            },
          },
        },
        "TagSpecifications": [
          {
            "ResourceType": "launch-template",
            "Tags": [
              {
                "Key": "gu:cdk:version",
                "Value": "TEST",
              },
              {
                "Key": "gu:repo",
                "Value": "guardian/grid-cerebro",
              },
              {
                "Key": "Name",
                "Value": "cerebro-TEST/media-service-TEST-cerebro",
              },
              {
                "Key": "Stack",
                "Value": "media-service",
              },
              {
                "Key": "Stage",
                "Value": "TEST",
              },
            ],
          },
        ],
      },
      "Type": "AWS::EC2::LaunchTemplate",
    },
    "mediaserviceTESTcerebroProfile9BF83A02": {
      "Properties": {
        "Roles": [
          {
            "Ref": "InstanceRoleCerebroE772BF3D",
          },
        ],
      },
      "Type": "AWS::IAM::InstanceProfile",
    },
  },
}
`;
